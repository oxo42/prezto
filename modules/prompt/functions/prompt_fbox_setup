# vim:ft=zsh ts=2 sw=2 sts=2
#
# agnoster's Theme - https://gist.github.com/3712874
# A Powerline-inspired theme for ZSH
#
# # README
#
# In order for this theme to render correctly, you will need a
# [Powerline-patched font](https://gist.github.com/1595572).
#
# In addition, I recommend the
# [Solarized theme](https://github.com/altercation/solarized/) and, if you're
# using it on Mac OS X, [iTerm 2](http://www.iterm2.com/) over Terminal.app -
# it has significantly better color fidelity.
#
# # Goals
#
# The aim of this theme is to only show you *relevant* information. Like most
# prompts, it will only show git information when in a git working directory.
# However, it goes a step further: everything from the current user and
# hostname to whether the last call exited with an error to whether background
# jobs are running in this shell will all be displayed automatically when
# appropriate.

### Segment drawing
# A few utility functions to make it easy and re-usable to draw segmented prompts

CURRENT_BG='NONE'
PRIMARY_FG=black

# Characters
SEGMENT_SEPARATOR="\ue0b0"
PLUSMINUS="\u00b1"
DELTA="\u0394" # Δ
SIGMA="\u03a3" # Σ
BRANCH="\ue0a0"
DETACHED="\u27a6"
CROSS="\u2718"
TICK="\u221a"
LIGHTNING="\u221e"
GEAR="\u2736"

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    print -n "%{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%}"
  else
    print -n "%{$bg%}%{$fg%}"
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -n $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    print -n "%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    print -n "%{%k%}"
  fi
  print -n "%{%f%}"
  CURRENT_BG=''
}

### Prompt components
# Each component will draw itself, and hide itself if no information needs to be shown

# Context: user@hostname (who am I and where am I)
prompt_context() {
  prompt_segment $PRIMARY_FG default "%{%F{blue}%}%n%{%F{red}%}@%{%F{green}%}%m%f"
}

# Facebook SCM
prompt_fbscm() {
  [[ -z $FB_SCM_TYPE ]] && return

  local color='green'
  local symbol
  local flag=$FB_SCM_STATE

  if [[ $FB_SCM_TYPE = 'hg' ]] ; then
    if [[ -z $FB_SCM_INFO ]] ; then
      color='green'
    else
      color='yellow'
    fi
  fi
  if [[ $FB_SCM_TYPE = 'git' ]] ; then
    if [[ -z $FB_SCM_INFO ]] ; then
      color='104' # Purplish
    else
      color='166' # Orange
    fi
  fi

  if [[ $FB_SCM_INFO =~ '!' ]] ; then
    # Modified
    [[ -z $symbol ]] && symbol=" "
    symbol="$symbol$DELTA"
  fi
  if [[ $FB_SCM_INFO =~ '\?' ]] ; then
    # Untracked
    [[ -z $symbol ]] && symbol=" "
    symbol="${symbol}$SIGMA"
  fi
  if [[ $flag == 'HISTEDIT' ]] ; then
    color='90' # redish purple
  fi

  if [[ -n $flag ]] ; then
    flag=" $flag"
  fi
  prompt_segment $color $PRIMARY_FG " $BRANCH $FB_SCM_BRANCH$flag$symbol "
}


# Dir: current working directory
prompt_dir() {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_sorin_pwd="$MATCH"
    unset MATCH
  else
    _prompt_sorin_pwd="${${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}//\%/%%}/${${pwd:t}//\%/%%}"
  fi
  prompt_segment blue $PRIMARY_FG " $_prompt_sorin_pwd "
}

# Status:
# - was there an error
# - am I root
# - are there background jobs?
prompt_status() {
  local symbols
  symbols=()
  [[ $UID -eq 0 ]] && symbols+="%{%F{yellow}%}$LIGHTNING%f"
  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{cyan}%}$GEAR%f"

  [[ -n "$symbols" ]] && prompt_segment $PRIMARY_FG default "$symbols "
}

# Show retval & signal
prompt_retval_status() {
  local retcol='green'
  if [[ $RETVAL -ne 0 ]] ; then
    local signal="$(builtin kill -l $[$RETVAL - 128] 2> /dev/null)"
    test "$signal" && signal=" ($signal)"
    retcol="red"
  fi
  prompt_segment $PRIMARY_FG default "[%{%F{$retcol}%}Exit: $RETVAL$signal%f] "
}

# Jobs
# display how many running and stopped jobs there are
prompt_jobs() {
  local stopped=$(jobs -s | wc -l | tr -d " ")
  local running=$(jobs -r | wc -l | tr -d " ")
  local jstr="%{%F{green}%}$running%f/%{%F{red}%}$stopped%f"
  prompt_segment $PRIMARY_FG default "[$jstr] "
}

## Main prompt
prompt_fbox_main() {
  RETVAL=$?
  CURRENT_BG='NONE'
  prompt_retval_status
  prompt_status
  prompt_jobs
  prompt_context
  prompt_dir
  prompt_fbscm
  prompt_end
}

prompt_fbox_precmd() {
  local dotfiles_scm_info=$(_dotfiles_scm_info %s)
  FB_SCM_TYPE=""
  FB_SCM_BRANCH=""
  FB_SCM_STATE=""
  FB_SCM_INFO=""
  if [[ -n $dotfiles_scm_info ]] ; then
    local parts=(${(@s/|/)dotfiles_scm_info})
    FB_SCM_TYPE=$parts[1]
    FB_SCM_BRANCH=$parts[2]
    FB_SCM_STATE=$parts[3]
    if [[ 'xhg' == "x$FB_SCM_TYPE" ]] ; then
      FB_SCM_INFO=$(hg prompt "{status|modified|unknown}" 2>/dev/null )
    fi
    if [[ 'xgit' == "x$FB_SCM_TYPE" ]] ; then
      local gitstatus=$(git status)
      local gitchange=$(echo $gitstatus | ack 'modified:|deleted:|new file:')
      if [[ -n $gitchange ]] ; then
        FB_SCM_INFO="!"
      fi

      local untracked=$(echo $gitstatus | ack 'Untracked files:')
      if [[ -n $untracked ]] ; then
        FB_SCM_INFO="$FB_SCM_INFO ?"
      fi
    fi
  fi
  PROMPT='%{%f%b%k%}$(prompt_fbox_main)
%(!.#.$) '
  RPROMPT='%F{blue}[%F{green}%D{%H:%M:%S}%F{blue}]%f'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_fbox_setup() {
  autoload -Uz add-zsh-hook

  prompt_opts=(cr subst percent)

  add-zsh-hook precmd prompt_fbox_precmd
}

prompt_fbox_setup "$@"
